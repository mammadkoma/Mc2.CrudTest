@page "/AddEditCustomer/{id?}"
@using System.Text.RegularExpressions;

<EditForm Model="@addEditModel" OnValidSubmit="SubmitForm">
    <div class="form-group row">
        <label for="@nameof(addEditModel.FirstName)" class="col-sm-2 col-form-label text-right">First name : </label>
        <div class="col-lg-7 col-sm-10">
            @*<input class="form-control" id="inputFirstname" placeholder="First name" autofocus>*@
            <InputText placeholder="First name" class="form-control" autofocus required
                       id="@nameof(addEditModel.FirstName)" @bind-Value="addEditModel.FirstName">
            </InputText>
        </div>
    </div>
    <div class="form-group row">
        <label for="@nameof(addEditModel.LastName)" class="col-sm-2 col-form-label text-right">Last name : </label>
        <div class="col-lg-7 col-sm-10">
            <InputText class="form-control" placeholder="Last name" required
                       id="@nameof(addEditModel.LastName)" @bind-Value="addEditModel.LastName">
            </InputText>
        </div>
    </div>
    <div class="form-group row">
        <label for="@nameof(addEditModel.DateOfBirth)" class="col-sm-2 col-form-label text-right">Date of birth : </label>
        <div class="col-lg-7 col-sm-10">
            <InputDate class="form-control" placeholder="Date of birth" required
                       id="@nameof(addEditModel.DateOfBirth)" @bind-Value="addEditModel.DateOfBirth">
            </InputDate>
        </div>
    </div>
    <div class="form-group row">
        <label for="@nameof(addEditModel.DateOfBirth)" class="col-sm-2 col-form-label text-right">Phone number : </label>
        <div class="col-lg-7 col-sm-10">
            <InputText class="form-control" placeholder="Phone number" required
                       id="@nameof(addEditModel.PhoneNumber)" @bind-Value="addEditModel.PhoneNumber">
            </InputText>
        </div>
    </div>
    <div class="form-group row">
        <label for="@nameof(addEditModel.Email)" class="col-sm-2 col-form-label text-right">Email : </label>
        <div class="col-lg-7 col-sm-10">
            <InputText type="email" class="form-control" placeholder="Email" required
                       id="@nameof(addEditModel.Email)" @bind-Value="addEditModel.Email">
            </InputText>
        </div>
    </div>
    <div class="form-group row">
        <label for="@nameof(addEditModel.BankAccountNumber)" class="col-sm-2 col-form-label text-right">Bank account number : </label>
        <div class="col-lg-7 col-sm-10">
            <input type="number" class="form-control" placeholder="Bank account number" required
                   id="@nameof(addEditModel.BankAccountNumber)"
                   @bind="addEditModel.BankAccountNumber" />
        </div>
    </div>
    <div class="col-lg-2 d-flex align-items-end">
        <button type="submit" class="btn btn-outline-success btn-block m-2">Submit</button>
        <button type="button" @onclick="CancelButtonClick" class="btn btn-outline-secondary btn-block m-2">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public string Id { get; set; }

    private CreateCustomerCommand addEditModel = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            var response = await _http.GetAsync("customers/GetById/" + Id);
            if (response.IsSuccessStatusCode)
            {
                using (var reponseStream = await response.Content.ReadAsStreamAsync())
                {
                    var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                    addEditModel = await JsonSerializer.DeserializeAsync<CreateCustomerCommand>(reponseStream, options);
                }
            }
        }
    }

    private async Task SubmitForm()
    {
        var emailPattern = @"^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-‌​]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
        Regex regex = new Regex(emailPattern);
        if (regex.IsMatch(addEditModel.Email) == false)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Email is not valid!");
            return;
        }

        if (Id == null) // Add
        {
            var response = await _http.PostAsJsonAsync("customers/Create", addEditModel);
            if (response.IsSuccessStatusCode) // 200
                _navigationManager.NavigateTo("Customers");
            else
                await JsRuntime.InvokeVoidAsync("alert", response.Content.ReadAsStringAsync().Result);
        }
        else // Update
        {
            var response = await _http.PutAsJsonAsync("customers/Update/" + Id, addEditModel);
            if (response.IsSuccessStatusCode) // 200
                _navigationManager.NavigateTo("Customers");
            else
                await JsRuntime.InvokeVoidAsync("alert", response.Content.ReadAsStringAsync().Result);
        }
    }

    private void CancelButtonClick()
    {
        _navigationManager.NavigateTo("Customers");
    }
}